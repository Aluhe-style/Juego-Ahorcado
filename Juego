/**
 * Genera un arreglo de palabras para jugar.
 * @return array
 */
function cargarPalabras(){
    // array $coleccionLetras (multidimensional de palabras)
	$coleccionPalabras = array();
	$coleccionPalabras[0]= array("palabra"=> "papa" , "pista" => "se cultiva bajo tierra", "puntosPalabra"=>7);
	$coleccionPalabras[1]= array("palabra"=> "hepatitis" , "pista" => "enfermedad que inflama el higado", "puntosPalabra"=> 7);
	$coleccionPalabras[2]= array("palabra"=> "volkswagen" , "pista" => "marca de vehiculo", "puntosPalabra"=> 10);
	$coleccionPalabras[3]= array ("palabra"=> "reiki", "pista" => "metodo esoterico, de sanacion con manos", "puntosPalabra" => 23);
	$coleccionPalabras[4]= array ("palabra" => "alma", "pista" => "lo que la ciencia aun no puede descubrir si realmente existe", "puntosPalabra" => 6);
	$coleccionPalabras[5]= array ("palabra" => "inflacion", "pista" => "consecuencia tras la devaluacion de la moneda de un pais", "puntosPalabra" => 60);
	$coleccionPalabras[6]= array ("palabra" => "universidad", "pista" => "Lugar donde se toman  parciales y trabajos practicos obligatorios", "puntosPalabra" => 11);

	return $coleccionPalabras;
}

/**
 * Generar un arreglo que cargue los juegos
 * @return array
 */
function cargarJuegos(){
	//array $coleccionJuegos (arreglo multidimencional)
	$coleccionJuegos = array();
	$coleccionJuegos[0] = array("puntos"=> 0, "indicePalabra" => 1);
	$coleccionJuegos[1] = array("puntos"=> 10,"indicePalabra" => 2);
	$coleccionJuegos[2] = array("puntos"=> 0, "indicePalabra" => 1);
	$coleccionJuegos[3] = array("puntos"=> 8, "indicePalabra" => 0);
	$coleccionJuegos[4] = array("puntos"=> 60, "indicePalabra" => 5);
	$coleccionJuegos[5] = array("puntos"=> 7, "indicePalabra" => 1);
	$coleccionJuegos[6] = array("puntos"=> 11, "indicePalabra" => 6);

	return $coleccionJuegos;
}

/**
 * A partir de la palabra generar un arreglo que determine si sus letras fueron (o no) descubiertas.
 * @param string $palabra
 * @return array
 */
function dividirPalabraEnLetras($palabra){
	//array $coleccionLetras, string $longi, int $cont
	$coleccionLetras = array();
	$longi= strlen($palabra);
	//strlen() devuelve el numero de bytes en lugar del numero de caracteres de un string (longitud de cadena)
	for ($cont=0;$cont<$longi;$cont++){
		$coleccionLetras[$cont] = array("letra"=> $palabra[$cont], "descubierta" => false);

	}
	return $coleccionLetras;

}

/**
 * Muestra y obtiene una opción del menú válida, mostrar error en caso contrario.
 * @return int
 */
function seleccionarOpcion(){
	//boolean $obtenerOp, int $opcion
	$obtenerOp = false;
	echo"----------------------------------------------------MENU----------------------------------------------------\n";
	echo "\n ( 1 ) Jugar con una palabra aleatoria";
	echo "\n ( 2 ) Jugar con una palabra elegida";
	echo "\n ( 3 ) Agregar una palabra al listado";
	echo "\n ( 4 ) Mostrar la informacion completa de un numero de juego";
	echo "\n ( 5 ) Mostrar la informacion completa del primer juego con mas puntaje";
	echo "\n ( 6 ) Mostrar la informacion completa del primer juego que supere un puntaje indicado por el usuario";
	echo "\n ( 7 ) Mostrar la lista de palabras ordenada por orden alfabetico";
	echo "\n ( 8 ) Salir\n";

	do{
		echo"\nIngrese una opcion valida:\n";
		$opcion=trim(fgets(STDIN));
		if(($opcion>8)||($opcion<1)){
			echo "Opcion invalida, intentelo de nuevo:  \n";
		}else{
			$obtenerOp=true;
		}
	}while(!$obtenerOp);
	echo "\n--------------------------------------------------------------------------------------------------------\n";
	return $opcion;
}

/**
 * Determina si una palabra existe en el arreglo que las almacena.
 * @param array $coleccionPalabras
 * @param string $palabra
 * @return boolean
 */
function existePalabra($coleccionPalabras, $palabra){
	//int $i, $cantPal, boolean $existe
	$i=0;
	$cantPal = count($coleccionPalabras);
	$existe = false;
	while($i<$cantPal && !$existe){
		$existe = $coleccionPalabras[$i]["palabra"] == $palabra;  
		$i++;
	}

	return $existe;
}

/**
 * Determina si una letra existe en el arreglo que las almacena.
 * @param array $coleccionLetras
 * @param string $letra
 * @return boolean
 */
function existeLetra($coleccionLetras, $letra){
	//int $i, $cantL, boolean $existe
	$i=0;
	$cantL = count($coleccionLetras);
	$existe = false;
	while($i<$cantL && !$existe){
		$existe = $coleccionLetras[$i]["letra"] == $letra; 
		$i++;
	}

	return $existe;
}

/**
 * Solicita datos a un usuario para ingresar en el arreglo de palabras (datos: palabra, pista y puntaje).
 * Verifica que la palabra ingresada por el usuario no exista en la coleccion de palabras.
 * @param array $coleccionPalabras
 * @return array
 */
function verificaPalabra($coleccionPalabras){
	// string $palabra, int $nIndice, $puntaje
		echo "Ingrese la palabra que decea agregar :\n";
		$palabra=strtolower(trim(fgets(STDIN))); //strtolower() Devuelve un string con todos los caracteres en minúsculas. 
		$nIndice = count($coleccionPalabras);
		if (!existePalabra($coleccionPalabras, $palabra)) {
			echo "ingrese la pista de la palabra: \n";
			$pista= strtolower(trim(fgets(STDIN)));
			echo "ingrese el puntaje: \n";
			$puntaje = trim(fgets(STDIN));
			$coleccionPalabras[$nIndice]= array("palabra"=> $palabra , "pista" => $pista, "puntosPalabra"=>$puntaje);
		}else{
			echo "Esta palabra ya existe \n";
		}
	
	return $coleccionPalabras;
}

/**
 * Obtener índice aleatorio entre mínimo y máximo.
 * @param int $min
 * @param int $max
 * @return int
 */
function indiceAleatorioEntre($min,$max){
	//int $indiceAl
	$indiceAl = rand($min,$max); /**Si la funcion rand() se invoca sin los argumentos opcionales, minimo y maximo, rand() devuelve un entero
	pseudoaleatorio entre cero (0) y maximo**/
	return $indiceAl;
}

/**
 * solicitar un valor entre min y max.
 * @param int $min
 * @param int $max
 * @return int
 */
function solicitarIndiceEntre($min,$max){
	//int $indiceEl
	do{
		echo "\nSeleccione un valor entre ". $min. " y ". $max. ": \n";
		$indiceEl = trim(fgets(STDIN));
	}while(!($indiceEl>=$min && $indiceEl<=$max));

	return $indiceEl; //indice elejido
}

/**
 * Determinar si la palabra fue descubierta (si todas sus letras fueron destapadas).
 * @param array $coleccionLetras
 * @return boolean
 */
function palabraDescubierta($coleccionLetras){
	//int $cont, $n, boolean $palabraDesc
	$cont=0;
	$palabraDesc=true;
	$n=count($coleccionLetras);
	while($cont<$n && $palabraDesc) {
		if ($coleccionLetras[$cont]["descubierta"]== false) {
			$palabraDesc=false;
		}
		$cont=$cont+1;
	}

	return  $palabraDesc;
}

/**
 * Solicitar una letra al usuario.
 *@return string
 */
function solicitarLetra(){
	//boolean $letraCorrecta, string $letra
	$letraCorrecta = false;
	do{
		echo "\n Ingrese una letra: \n";
		$letra = strtolower(trim(fgets(STDIN))); //strtolower() convierte lo que ingresa el usuario en minuscula.
		if(strlen($letra)!=1){ //strlen() La longitud del string en caso de éxito, y 0 si el string esta vacío.
			echo "¡Debe ingresar una sola letra! \n";
		}else{
			$letraCorrecta = true;
		}

	}while(!$letraCorrecta);

	return $letra;
}

/**
 * Modifica la coleccion de letras, con las que fueron descubiertas.
 * @param array $coleccionLetras
 * @param string $letra
 * @return array
 */
function destaparLetra($coleccionLetras, $letra){
	//int $indiceDes, string $caracter
	$indiceDes=count($coleccionLetras);
	foreach ($coleccionLetras as $indiceDes => $caracter) {
		if ( $caracter["letra"] == $letra) { 
			$coleccionLetras[$indiceDes]["descubierta"]= true;
		}
	}
	return $coleccionLetras;
}

/**
 * Obtiene la palabra con las letras descubiertas y "*" en las letras no fueron descubiertas. Ejemplo: he**t*t*s.
 * @param array $coleccionLetras
 * @return string
 */
function stringLetrasDescubiertas($coleccionLetras){
	//string $pal, int $indiceL
	$pal = " ";
	$indiceL=count($coleccionLetras);
	foreach ($coleccionLetras as $indiceL) {
		if ($indiceL["descubierta"]) { 
			$pal = $pal.$indiceL["letra"];
		}
		else{
			$pal= $pal."*";
		}
	}
	return $pal;
}

/**
 * Desarrolla el juego y retorna el puntaje obtenido
 * Si descubre la palabra se suma el puntaje de la palabra mas la cantidad de intentos que quedaron
 * Si no descubre la palabra el puntaje es 0.
 * @param array $coleccionPalabras
 * @param int $indicePalabra
 * @param int $cantIntentos
 * @return int
 */
function jugar($coleccionPalabras,$indicePalabra, $cantIntentos){
	//string $a $pal, $coleccionLetras, int $puntaje boolean $palabraFueDescubierta
	$pal = $coleccionPalabras[$indicePalabra]["palabra"];
	$coleccionLetras = dividirPalabraEnLetras($pal); //coleccionLetras es el retono de la invocacion de esa funcion.
	$puntaje = 0;
	echo "Pista: ".$coleccionPalabras[$indicePalabra]["pista"]."\n";
	do{
		$a =solicitarLetra();// $a es la letra ingresada por el usuario
		if (existeLetra($coleccionLetras, $a)) {
			$coleccionLetras= destaparLetra($coleccionLetras, $a);
		}
		else{
			$cantIntentos= $cantIntentos - 1;
			echo "\nTe quedan: ".$cantIntentos." intentos.\n";
		}
		echo "\nPalabra a descubrir: ".stringLetrasDescubiertas($coleccionLetras);
		$palabraFueDescubierta= palabraDescubierta($coleccionLetras);
		
	}while ($cantIntentos>0 && !$palabraFueDescubierta);
	      If($palabraFueDescubierta){ //true
		  $puntaje = $coleccionPalabras[$indicePalabra]["puntosPalabra"];
		  $puntaje = $puntaje+$cantIntentos;
		       echo "\n¡¡¡¡¡GANASTE ".$puntaje." puntos!!!!!!\n";
	      }else{
		       echo "\n¡¡¡¡¡AHORCADO AHORCADO!!!!!!\n";
	}

	return $puntaje;
}
/**
 * Agrega un nuevo juego al arreglo de juegos
 * @param array $coleccionJuegos
 * @param int $puntos
 * @param int $indicePalabra
 * @return array
 */
function agregarJuego($coleccionJuegos,$puntos,$indicePalabra){
	//int $indice
	$indice=count($coleccionJuegos);
	$coleccionJuegos[$indice] = array("puntos"=> $puntos, "indicePalabra" => $indicePalabra);
	return $coleccionJuegos;
}

/**
 * Muestra los datos completos de una palabra
 * @param array $coleccionPalabras
 * @param int $indicePalabra
 */
function mostrarPalabra($coleccionPalabras,$indicePalabra){
	echo "\n\n";
	echo "<-<-< Indice Palabra: ".$indicePalabra.">->->\n";
	echo "Palabra: ".$coleccionPalabras[$indicePalabra]["palabra"]." \n";
	echo "Pista: ".$coleccionPalabras[$indicePalabra]["pista"]." \n";
	echo "Puntaje de la palabra: ".$coleccionPalabras[$indicePalabra]["puntosPalabra"]." \n";
	echo "\n";
}

/**
 * Muestra los datos completos de un juego
 * @param array $coleccionJuegos
 * @param array $coleccionPalabras
 * @param int $indiceJuego
 */
function mostrarJuego($coleccionJuegos,$coleccionPalabras,$indiceJuego){
	//array("puntos"=> 8, "indicePalabra" => 1)
	echo "\n\n";
	echo "<-<-< Juego ".$indiceJuego." >->->\n";
	echo "  Puntos ganados: ".$coleccionJuegos[$indiceJuego]["puntos"]."\n";
	echo "  Información de la palabra:\n";
	echo mostrarPalabra($coleccionPalabras,$coleccionJuegos[$indiceJuego]["indicePalabra"]);
	echo "\n";
}


/**
 * Muestra la informacion completa del primer juego con mas puntaje
 * @param array $coleccionJuegos
 * @param array $coleccionPalabras
 */
function opcion5 ($coleccionJuegos, $coleccionPalabras){
	//int $indice, $esMayor, $indiceM, $punt
	$indice = count($coleccionJuegos);
	$esMayor = 0;
	$indiceM = 0;
	foreach($coleccionJuegos as $indice => $punt){
		if($punt["puntos"]>$esMayor){
			$esMayor = $punt["puntos"];
			$indiceM = $indice;
		}
	}
	echo"El juego con mayor puntaje es: \n";
	mostrarJuego($coleccionJuegos, $coleccionPalabras, $indiceM);
}

/**
 *Mostrar la informacion completa del primer juego con un puntaje mayor al que ingrese el usuario
 *@param array $coleccionJuegos
 *@param array $coleccionPalabras
 *@return int
 */
function opcion6 ($coleccionJuegos, $coleccionPalabras){
	//int $posicion, $indice, $cont, $mayor, boolean $final,
	$posicion = count($coleccionJuegos);
	$final = false;
	$indice = 0;
	$cont = 0;
	echo "Ingrese un numero para determinar un puntaje mayor:\n";
	$mayor=trim(fgets(STDIN));
	while($cont<$posicion && !$final){
		if ($coleccionJuegos[$cont]["puntos"]>$mayor) {
			$final = true;
			$indice = $cont;
		}
		$cont = $cont + 1;
	}
	if (!$final) {
		echo "No hay Juego que supere la puntuacion ingresada \n";
	}
	else{
		echo "\n";
		echo "El primer juego que supera la puntuacion ingresada es:";
		echo mostrarJuego($coleccionJuegos, $coleccionPalabras, $indice)."";
	}
}
/**
 * Muestra la lista de palabras ordenada por orden alfabetico
 * @param array $pal1
 * @param array $pal2
 * @return int
 */
function comparacion ($pal1, $pal2) {
	//int $comparacion
	$comparacion = strcmp($pal1["palabra"], $pal2["palabra"]); /*Devuelve < 0 si str1 es menor que str2; > 0 si str1 es mayor que str2 y
	 0 si son iguales.*/
	return $comparacion;
}
/**
 * imprime en pantalla la coleccion de palabras ordenadas de forma descendiente
 * @param array $ColeccionPalabras
 */
function palabrasOrdenadas7 ($ColeccionPalabras) {
	usort($ColeccionPalabras, 'comparacion');//ordena el arreglo dada una funcion de comparacion
	print_r($ColeccionPalabras);// imprime las claves y elementos del arreglo en forma legible
}
/******************************************/
/************** PROGRAMA PRINCIAL *********/
/******************************************/
$cantDeIntentos = 6; //cantidad de intentos que tendra el jugador para adivinar la palabra.
$almacenPalabras = array();
$almacenPalabras = cargarPalabras(); //colecciondePalabras
$almacenJuegos = array();
$almacenJuegos = cargarJuegos(); //coleccionJuegos
$minimo=0;
$maximo = count($almacenPalabras);

do{
	$opcion = seleccionarOpcion();
	switch ($opcion) {
		case 1: //Jugar con una palabra aleatoria
			$indiceAleatorio = indiceAleatorioEntre ($minimo, $maximo);
			$punt = jugar($almacenPalabras,$indiceAleatorio, $cantDeIntentos);
			$almacenJuegos = agregarJuego($almacenJuegos, $punt, $indiceAleatorio);

			break;
		case 2: //Jugar con una palabra elegida
			$indiceElejido = solicitarIndiceEntre($minimo, $maximo);
			$punt = jugar($almacenPalabras, $indiceElejido, $cantDeIntentos);
			$almacenJuegos = agregarJuego ($almacenJuegos, $punt, $indiceElejido);

			break;
		case 3: //Agregar una palabra al listado
			$almacenPalabras = verificaPalabra($almacenPalabras);
			break;
		case 4: //Mostrar la informacion completa de un numero de juego
			$indice4 = solicitarIndiceEntre($minimo, $maximo);
			mostrarJuego($almacenJuegos, $almacenPalabras, $indice4);
			break;
		case 5: //Mostrar la informacion completa del primer juego con mas puntaje
			opcion5($almacenJuegos, $almacenPalabras);
			break;
		case 6: //Mostrar la informacion completa del primer juego que supere un puntaje indicado por el usuario
			opcion6 ($almacenJuegos, $almacenPalabras);
			break;
		case 7: //Mostrar la lista de palabras ordenada por orden alfabetico
			palabrasOrdenadas7($almacenPalabras);
			break;
		default:
			echo"\nHasta luego...\n";
	}
}while($opcion != 8);
